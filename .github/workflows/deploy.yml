name: Deploy to Docker Hub

on:

  # Build and deploy the image on pushes to master branch
  push:
    branches: 
      - master
      - main
    # Don't trigger if it's just a documentation update
    paths-ignore:
      - '**.md'
      - '**.MD'
      - '**.yml'
      - 'LICENSE'
      - '.gitattributes'
      - '.gitignore'
      - '.dockerignore'
      
# Set workflow-wide environment variables
#  - REPO: repo name on dockerhub
#  - IMAGE: image name on dockerhub
env:
  DOCKERHUB_REPO: mikenye
  DOCKERHUB_IMAGE: minecraft_bedrock_server
  GHCR_IMAGE: ${{ github.repository }}
  GHCR_REGISTRY: ghcr.io

jobs:

  deploy_dockerhub:
    name: Deploy Docker Hub
    needs: [hadolint]
    runs-on: ubuntu-latest

    steps:

      # Check out our code
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # # Set up QEMU for multi-arch builds
      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v2

      # Log into docker hub (so we can push images)
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_REPO }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Set up buildx for multi platform builds
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      # # Get archictecture suffix
      # - name: Get image architecture suffix
      #   run: |
      #     echo "ARCH_TAG=$(echo '${{ matrix.docker-platform }}' | cut -d '/' -f2- | tr -s '/' '_')" >> $GITHUB_ENV
      # # Show archictecture suffix
      # - name: Show image architecture suffix
      #   run: |
      #     echo "Architecture suffix: ${{ env.ARCH_TAG }}"

      # Build "latest"
      - name: Build & Push - latest
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          no-cache: true
          platforms: linux/amd64
          push: true
          tags: ${{ env.DOCKERHUB_REPO }}/${{ env.DOCKERHUB_IMAGE }}:latest

      # Get version from "latest"
      - name: Get latest image version
        run: |
          docker pull "${{ env.DOCKERHUB_REPO }}/${{ env.DOCKERHUB_IMAGE }}:latest"
          echo "VERSION_TAG=$(docker run --rm --entrypoint cat "${{ env.DOCKERHUB_REPO }}/${{ env.DOCKERHUB_IMAGE }}:latest" /CONTAINER_VERSION)" >> $GITHUB_ENV

      # Show version from "latest"
      - name: Show latest image version
        run: |
          echo "${{ env.DOCKERHUB_REPO }}/${{ env.DOCKERHUB_IMAGE }}:latest contains version: ${{ env.VERSION_TAG }}"

      # Build version specific
      - name: Build & Push - version specific
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          no-cache: false
          platforms: linux/amd64
          push: true
          tags: ${{ env.DOCKERHUB_REPO }}/${{ env.DOCKERHUB_IMAGE }}:${{ env.VERSION_TAG }}

      # Patch dockerfile to remove healthcheck
      - name: Patch Dockerfile to remove healthcheck
        run: sed '/^HEALTHCHECK /d' < Dockerfile > Dockerfile.nohealthcheck

      # Build "latest_nohealthcheck"
      - name: Build & Push - latest nohealthcheck
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile.nohealthcheck
          no-cache: false
          platforms: linux/amd64
          push: true
          tags: ${{ env.DOCKERHUB_REPO }}/${{ env.DOCKERHUB_IMAGE }}:latest_nohealthcheck

      # Build version specific _nohealthcheck
      - name: Build & Push - version specific nohealthcheck
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile.nohealthcheck
          no-cache: false
          platforms: linux/amd64
          push: true
          tags: ${{ env.DOCKERHUB_REPO }}/${{ env.DOCKERHUB_IMAGE }}:${{ env.VERSION_TAG }}_nohealthcheck

  deploy_ghrc:
    name: Deploy ghcr.io
    needs: [hadolint]
    runs-on: ubuntu-latest

    steps:

      # Check out our code
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Log into ghcr (so we can push images)
      - name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Get metadata from repo
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.GHCR_REGISTRY }}/${{ env.IMAGE_NAME }}

      # # Set up QEMU for multi-arch builds
      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v2

      # Set up buildx for multi platform builds
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      # # Get archictecture suffix
      # - name: Get image architecture suffix
      #   run: |
      #     echo "ARCH_TAG=$(echo '${{ matrix.docker-platform }}' | cut -d '/' -f2- | tr -s '/' '_')" >> $GITHUB_ENV

      # # Show archictecture suffix
      # - name: Show image architecture suffix
      #   run: |
      #     echo "Architecture suffix: ${{ env.ARCH_TAG }}"

      # Build "latest"
      - name: Build & Push - latest
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          no-cache: true
          platforms: linux/amd64
          push: true
          tags: ghcr.io/${{ env.GHCR_IMAGE }}:latest
          labels: ${{ steps.meta.outputs.labels }}

      # Get version from "latest"
      - name: Get latest image version
        run: |
          docker pull "ghcr.io/${{ env.GHCR_IMAGE }}:latest"
          echo "VERSION_TAG=$(docker run --rm --entrypoint cat "ghcr.io/${{ env.GHCR_IMAGE }}:latest" /CONTAINER_VERSION)" >> $GITHUB_ENV

      # Show version from "latest"
      - name: Show latest image version
        run: |
          echo "ghcr.io/${{ env.GHCR_IMAGE }}:latest contains version: ${{ env.VERSION_TAG }}"

      # Build version specific
      - name: Build & Push - version specific
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          no-cache: false
          platforms: linux/amd64
          push: true
          tags: ghcr.io/${{ env.GHCR_IMAGE }}:${{ env.VERSION_TAG }}
          labels: ${{ steps.meta.outputs.labels }}

      # Patch dockerfile to remove healthcheck
      - name: Patch Dockerfile to remove healthcheck
        run: sed '/^HEALTHCHECK /d' < Dockerfile > Dockerfile.nohealthcheck

      # Build "latest_nohealthcheck"
      - name: Build & Push - latest nohealthcheck
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile.nohealthcheck
          no-cache: false
          platforms: linux/amd64
          push: true
          tags: ghcr.io/${{ env.GHCR_IMAGE }}:latest_nohealthcheck
          labels: ${{ steps.meta.outputs.labels }}

      # Build version specific _nohealthcheck
      - name: Build & Push - version specific nohealthcheck
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile.nohealthcheck
          no-cache: false
          platforms: linux/amd64
          push: true
          tags: ghcr.io/${{ env.GHCR_IMAGE }}:${{ env.VERSION_TAG }}_nohealthcheck
          labels: ${{ steps.meta.outputs.labels }}
